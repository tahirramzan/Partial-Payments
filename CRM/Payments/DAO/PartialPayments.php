<?php
/*
+--------------------------------------------------------------------+
| CiviCRM version 4.6                                                |
+--------------------------------------------------------------------+
| Copyright CiviCRM LLC (c) 2004-2015                                |
+--------------------------------------------------------------------+
| This file is a part of CiviCRM.                                    |
|                                                                    |
| CiviCRM is free software; you can copy, modify, and distribute it  |
| under the terms of the GNU Affero General Public License           |
| Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
|                                                                    |
| CiviCRM is distributed in the hope that it will be useful, but     |
| WITHOUT ANY WARRANTY; without even the implied warranty of         |
| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
| See the GNU Affero General Public License for more details.        |
|                                                                    |
| You should have received a copy of the GNU Affero General Public   |
| License and the CiviCRM Licensing Exception along                  |
| with this program; if not, contact CiviCRM LLC                     |
| at info[AT]civicrm[DOT]org. If you have questions about the        |
| GNU Affero General Public License or the licensing of CiviCRM,     |
| see the CiviCRM license FAQ at http://civicrm.org/licensing        |
+--------------------------------------------------------------------+
*/
/**
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2015
 *
 * Generated from xml/schema/CRM/PartialPayments/PartialPayments.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */
require_once 'CRM/Core/DAO.php';
require_once 'CRM/Utils/Type.php';
class CRM_PartialPayments_DAO_PartialPayments extends CRM_Core_DAO
{
  /**
   * static instance to hold the table name
   *
   * @var string
   */
  static $_tableName = 'civicrm_partial_payments';
  /**
   * static instance to hold the field values
   *
   * @var array
   */
  static $_fields = null;
  /**
   * static instance to hold the keys used in $_fields for each field.
   *
   * @var array
   */
  static $_fieldKeys = null;
  /**
   * static instance to hold the FK relationships
   *
   * @var string
   */
  static $_links = null;
  /**
   * static instance to hold the values that can
   * be imported
   *
   * @var array
   */
  static $_import = null;
  /**
   * static instance to hold the values that can
   * be exported
   *
   * @var array
   */
  static $_export = null;
  /**
   * static value to see if we should log any modifications to
   * this table in the civicrm_log table
   *
   * @var boolean
   */
  static $_log = true;
  /**
   *
   * @var int unsigned
   */
  public $id;
  /**
   *
   * @var int unsigned
   */
  public $contribution_id;
  /**
   *
   * @var int unsigned
   */
  public $primary_contact_id;
  /**
   *
   * @var int unsigned
   */
  public $secondary_contact_id;
  /**
   *
   * @var string
   */
  public $email;
  /**
   *
   * @var float
   */
  public $total_amount;
  /**
   *
   * @var float
   */
  public $installment_amount;
  /**
   *
   * @var float
   */
  public $fees_amount;
  /**
   *
   * @var string
   */
  public $description;
  /**
   *
   * @var text
   */
  public $note;
  /**
   *
   * @var text
   */
  public $adhoc_charges_note;
  /**
   *
   * @var float
   */
  public $deducted_amount;
  /**
   *
   * @var boolean
   */
  public $is_full_paid;
  /**
   *
   * @var boolean
   */
  public $is_partial_paid;
  /**
   *
   * @var int unsigned
   */
  public $created_by;
  /**
   *
   * @var datetime
   */
  public $created_date;
  /**
   *
   * @var int unsigned
   */
  public $updated_by;
  /**
   *
   * @var datetime
   */
  public $updated_date;
  /**
   * class constructor
   *
   * @return civicrm_partial_payments
   */
  function __construct()
  {
    $this->__table = 'civicrm_partial_payments';
    parent::__construct();
  }
  /**
   * Returns foreign keys and entity references
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  static function getReferenceColumns()
  {
    if (!self::$_links) {
      self::$_links = static ::createReferenceColumns(__CLASS__);
      self::$_links[] = new CRM_Core_Reference_Basic(self::getTableName() , 'primary_contact_id', 'civicrm_contact', 'id');
      self::$_links[] = new CRM_Core_Reference_Basic(self::getTableName() , 'secondary_contact_id', 'civicrm_contact', 'id');
    }
    return self::$_links;
  }
  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  static function &fields()
  {
    if (!(self::$_fields)) {
      self::$_fields = array(
        'id' => array(
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'required' => true,
        ) ,
        'contribution_id' => array(
          'name' => 'contribution_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Contribution ID') ,
          'required' => true,
          'import' => true,
          'where' => 'civicrm_partial_payments.contribution_id',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
        ) ,
        'primary_contact_id' => array(
          'name' => 'primary_contact_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Primary Contact ID') ,
          'required' => true,
          'import' => true,
          'where' => 'civicrm_partial_payments.primary_contact_id',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
          'FKClassName' => 'CRM_Contact_DAO_Contact',
        ) ,
        'secondary_contact_id' => array(
          'name' => 'secondary_contact_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Secondary Contact ID') ,
          'required' => false,
          'import' => true,
          'where' => 'civicrm_partial_payments.secondary_contact_id',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
          'FKClassName' => 'CRM_Contact_DAO_Contact',
        ) ,
        'partial_payments_email' => array(
          'name' => 'email',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Email') ,
          'required' => true,
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'export' => true,
          'where' => 'civicrm_partial_payments.email',
          'headerPattern' => '',
          'dataPattern' => '',
        ) ,
        'total_amount' => array(
          'name' => 'total_amount',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => ts('Total amount') ,
          'required' => true,
          'precision' => array(
            20,
            2
          ) ,
          'import' => true,
          'where' => 'civicrm_partial_payments.total_amount',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
        ) ,
        'installment_amount' => array(
          'name' => 'installment_amount',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => ts('Installment amount') ,
          'required' => true,
          'precision' => array(
            20,
            2
          ) ,
          'import' => true,
          'where' => 'civicrm_partial_payments.installment_amount',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
        ) ,
        'fees_amount' => array(
          'name' => 'fees_amount',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => ts('Fees amount') ,
          'required' => true,
          'precision' => array(
            20,
            2
          ) ,
          'import' => true,
          'where' => 'civicrm_partial_payments.fees_amount',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
        ) ,
        'description' => array(
          'name' => 'description',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Description') ,
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
        ) ,
        'note' => array(
          'name' => 'note',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => ts('Note') ,
        ) ,
        'adhoc_charges_note' => array(
          'name' => 'adhoc_charges_note',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => ts('Adhoc Charges Note') ,
        ) ,
        'deducted_amount' => array(
          'name' => 'deducted_amount',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => ts('Deducted Amount') ,
          'precision' => array(
            20,
            2
          ) ,
        ) ,
        'is_full_paid' => array(
          'name' => 'is_full_paid',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Full Paid') ,
          'import' => true,
          'where' => 'civicrm_partial_payments.is_full_paid',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
        ) ,
        'is_partial_paid' => array(
          'name' => 'is_partial_paid',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Partial Refunded') ,
          'import' => true,
          'where' => 'civicrm_partial_payments.is_partial_paid',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
        ) ,
        'created_by' => array(
          'name' => 'created_by',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Created By') ,
          'required' => true,
        ) ,
        'created_date' => array(
          'name' => 'created_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => ts('Created Date') ,
          'required' => true,
        ) ,
        'updated_by' => array(
          'name' => 'updated_by',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Updated By') ,
          'required' => true,
        ) ,
        'updated_date' => array(
          'name' => 'updated_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => ts('Updated Date') ,
          'required' => true,
        ) ,
      );
    }
    return self::$_fields;
  }
  /**
   * Returns an array containing, for each field, the arary key used for that
   * field in self::$_fields.
   *
   * @return array
   */
  static function &fieldKeys()
  {
    if (!(self::$_fieldKeys)) {
      self::$_fieldKeys = array(
        'id' => 'id',
        'contribution_id' => 'contribution_id',
        'primary_contact_id' => 'primary_contact_id',
        'secondary_contact_id' => 'secondary_contact_id',
        'email' => 'partial_payments_email',
        'total_amount' => 'total_amount',
        'installment_amount' => 'installment_amount',
        'fees_amount' => 'fees_amount',
        'description' => 'description',
        'note' => 'note',
        'adhoc_charges_note' => 'adhoc_charges_note',
        'deducted_amount' => 'deducted_amount',
        'is_full_paid' => 'is_full_paid',
        'is_partial_paid' => 'is_partial_paid',
        'created_by' => 'created_by',
        'created_date' => 'created_date',
        'updated_by' => 'updated_by',
        'updated_date' => 'updated_date',
      );
    }
    return self::$_fieldKeys;
  }
  /**
   * Returns the names of this table
   *
   * @return string
   */
  static function getTableName()
  {
    return self::$_tableName;
  }
  /**
   * Returns if this table needs to be logged
   *
   * @return boolean
   */
  function getLog()
  {
    return self::$_log;
  }
  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  static function &import($prefix = false)
  {
    if (!(self::$_import)) {
      self::$_import = array();
      $fields = self::fields();
      foreach($fields as $name => $field) {
        if (CRM_Utils_Array::value('import', $field)) {
          if ($prefix) {
            self::$_import['partial_payments'] = & $fields[$name];
          } else {
            self::$_import[$name] = & $fields[$name];
          }
        }
      }
    }
    return self::$_import;
  }
  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  static function &export($prefix = false)
  {
    if (!(self::$_export)) {
      self::$_export = array();
      $fields = self::fields();
      foreach($fields as $name => $field) {
        if (CRM_Utils_Array::value('export', $field)) {
          if ($prefix) {
            self::$_export['partial_payments'] = & $fields[$name];
          } else {
            self::$_export[$name] = & $fields[$name];
          }
        }
      }
    }
    return self::$_export;
  }
}
